//  imagine que voc√™ tem um array de objetos. Cada objeto √© um estudante com seu nome, nota e situa√ß√£o no curso. Para ser aprovado, ele precisa obter uma nota acima de 60. Como voc√™ pode ver, o objeto abaixo est√° desatualizado e precisa ser atualizado: ele n√£o cont√©m a informa√ß√£o acerca da aprova√ß√£o. Para atualiz√°-lo, voc√™ provavelmente escreveria algo assim, utilizando loops:

const students = [
  { name: 'Maria', note: 70, approved: '' },
  { name: 'Jos√©', note: 56, approved: '' },
  { name: 'Roberto', note: 90, approved: '' },
  { name: 'Ana', note: 81, approved: '' }
];

function verifyNote(student) {
  if (student.note >= 60) {
    student.approved = 'Aprovado';
  } else {
    student.approved = 'Recupera√ß√£o';
  }
}
// Usando for da maneira convencional
let i;
for (i = 0; i < students.length; i += 1) {
  verifyNote(students[i]);
}

console.log(students);

//Usando forEach
students.forEach(verifyNote);

console.log(students);

/* As duas abordagens geram o mesmo resultado, mas qual a diferen√ßa? Vamos analisar as duas solu√ß√µes e ver em que elas diferem!
   Na solu√ß√£o usando for, √© necess√°rio se preocupar muito mais com detalhes de controle de l√≥gica de execu√ß√£o do que com sua solu√ß√£o em si - voc√™ s√≥ quer atualizar uma propriedade de cada estudante, afinal. Voc√™ precisa:
  Declarar uma vari√°vel para controlar a itera√ß√£o pelo array;
  Inicializar essa vari√°vel com zero, a primeira posi√ß√£o do array;
  Controlar o ponto de parada, quando o fim do array foi alcan√ßado (i < students.length);
  Incrementar manualmente a vari√°vel de controle do loop a cada itera√ß√£o (i += 1);
  Usar indexa√ß√£o de arrays pra acessar cada elemento/estudante (students[i]);
  Tudo isso s√≥ pra atualizar o seu array!
  Agora vamos olhar para a segunda solu√ß√£o. Tudo o que voc√™ precisa fazer √© chamar a fun√ß√£o forEach no array e passar para ela a fun√ß√£o que voc√™ criou. E mais nada! Esse √© o poder da fun√ß√£o forEach. üòé*/

  const numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

  const multipliesFor2 = (element) => {
    console.log(`${element} * 2: ${element * 2}`);
  };
  
  numbers.forEach(multipliesFor2);
  /*No exemplo acima, ele realizou em cada elemento do array a fun√ß√£o multipliesFor2, que imprime o par√¢metro * 2 no console. 
  O forEach n√£o retorna nenhum valor*/